package lib

import (
	"fmt"
	"html/template"
	"log"
	"path/filepath"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/spf13/afero"

	"github.com/devops-kung-fu/meadow/models"
)

var renderModel []models.RenderModel

// Generate reads the provided glade file and outputs go source code to the provided path
func Generate(afs *afero.Afero, sourcefile string, outputPath string, outputName string, pkg string) (filename string, err error) {

	glade, err := Load(afs, sourcefile)
	if err != nil {
		return
	}

	absPath, _ := filepath.Abs(outputPath)
	exists, _ := afs.DirExists(absPath)
	if !exists {
		_ = afs.Mkdir(absPath, 0777)
	}
	filename = filepath.Join(absPath, outputName)

	err = writeTemplate(afs, filename, pkg, buildModel(glade))

	return
}

func buildModel(glade models.Glade) (renderModel []models.RenderModel) {
	for _, object := range glade.Object {
		renderModel = append(renderModel, processObject(object)...)
	}
	return
}

func processObject(object models.Object) (renderModel []models.RenderModel) {
	renderModel = append(renderModel, models.RenderModel{
		Class:  object.Class,
		Object: strings.TrimPrefix(object.Class, "Gtk"),
		ID:     object.ID,
		Name:   strcase.ToCamel(object.ID),
	})
	for _, child := range object.Child {
		renderModel = append(renderModel, processChild(child)...)
	}
	return
}

func processChild(child models.Child) (renderModel []models.RenderModel) {
	for _, object := range child.Object {
		renderModel = append(renderModel, processObject(object)...)
	}
	return
}

func writeTemplate(afs *afero.Afero, filename string, pkg string, renderModel []models.RenderModel) (err error) {
	file, err := afs.Create(filename)
	if err != nil {
		log.Println(err)
		return err
	}
	t := genTemplate("glade")
	_ = t.ExecuteTemplate(file, "glade", renderModel)

	_, _ = file.WriteAt([]byte(fmt.Sprintf("package %s", pkg)), 0)
	err = afs.Fs.Chmod(filename, 0777)
	if err != nil {
		return err
	}

	return
}

func genTemplate(name string) (t *template.Template) {

	content := `package                                                                                 

//
// CAUTION: This file was generated by meadow.
//
// Changes made to this file may be overwritten if meadow is run again.
// For more information, check out https://github.com/devops-kung-fu/meadow
//

import (
	"github.com/gotk3/gotk3/gtk"
)

// GtkBuilder returns *gtk.getBuilder loaded with glade resource (if resource is given)
func GtkBuilder(filename string) (*gtk.Builder, error) {

	b, err := gtk.BuilderNew()
	if err != nil {
		return nil, err
	}

	if filename != "" {
		err = b.AddFromFile(filename)
		if err != nil {
			return nil, err
		}
	}

	return b, nil
}
{{range .}}
//{{.Name}} returns the object represented by {{.ID}} in the glade file
func {{.Name}}(b *gtk.Builder) (*gtk.{{.Object}}, error) {

	obj, err := b.GetObject("{{.ID}}")
	if err != nil {
		return nil, err
	}

	{{.ID}}, ok := obj.(*gtk.{{.Object}})
	if !ok {
		return nil, err
	}

	return {{.ID}}, nil
}
{{end}}
`
	return template.Must(template.New(name).Parse(content))
}
